<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3store2\models\base;

use d3system\behaviors\D3DateTimeBehavior;
use Yii;

/**
 * This is the base-model class for table "store2_transaction".
 *
 * @property integer $id
 * @property integer $from_id
 * @property string $type
 * @property string $time
 * @property integer $user_id
 * @property integer $stack_id
 * @property string $qnt
 * @property string $remain_qnt
 *
 * @property \d3yii2\d3store2\models\Store2Transaction $from
 * @property \d3yii2\d3store2\models\Store2Stack $stack
 * @property \d3yii2\d3store2\models\Store2TranRef[] $store2TranRefs
 * @property \d3yii2\d3store2\models\Store2Transaction[] $store2Transactions
 * @property string $aliasModel
 */
abstract class Store2Transaction extends \yii\db\ActiveRecord
{


    /**
     * ENUM field values
     */
    public const TYPE_IN = 'In';
    public const TYPE_OUT = 'Out';
    public const TYPE_TRANSFER = 'Transfer';

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'store2_transaction';
    }

    /**
     * get column type enum value label
     * @param string $value
     * @return string
     */
    public static function getTypeValueLabel($value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsType();
        return $labels[$value] ?? $value;
    }

    /**
     * column type ENUM value labels
     * @return array
     */
    public static function optsType(): array
    {
        return [
            self::TYPE_IN => Yii::t('store2', 'In'),
            self::TYPE_OUT => Yii::t('store2', 'Out'),
            self::TYPE_TRANSFER => Yii::t('store2', 'Transfer'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = [
        ];
        $behaviors = array_merge(
            $behaviors,
            D3DateTimeBehavior::getConfig(['time'])
        );
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['type', 'qnt', 'remain_qnt'], 'required'],
            'enum-type' => ['type', 'in', 'range' => [
                self::TYPE_IN,
                self::TYPE_OUT,
                self::TYPE_TRANSFER,
            ]
            ],
            'smallint Unsigned' => [['user_id', 'stack_id'], 'integer', 'min' => 0, 'max' => 65535],
            'integer Unsigned' => [['id', 'from_id'], 'integer', 'min' => 0, 'max' => 4294967295],
            [['type'], 'string'],
            [['time'], 'safe'],
            [['qnt', 'remain_qnt'], 'number'],
            [['from_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3store2\models\Store2Transaction::className(), 'targetAttribute' => ['from_id' => 'id']],
            [['stack_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3store2\models\Store2Stack::className(), 'targetAttribute' => ['stack_id' => 'id']],
            'D3DateTimeBehavior' => [['time_local'], 'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('store2', 'ID'),
            'from_id' => Yii::t('store2', 'From stack'),
            'type' => Yii::t('store2', 'Type'),
            'time' => Yii::t('store2', 'Time'),
            'user_id' => Yii::t('store2', 'User'),
            'stack_id' => Yii::t('store2', 'Stack'),
            'qnt' => Yii::t('store2', 'Quantity'),
            'remain_qnt' => Yii::t('store2', 'Remain Quantity'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFrom()
    {
        return $this->hasOne(\d3yii2\d3store2\models\Store2Transaction::className(), ['id' => 'from_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStack()
    {
        return $this->hasOne(\d3yii2\d3store2\models\Store2Stack::className(), ['id' => 'stack_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStore2TranRefs()
    {
        return $this->hasMany(\d3yii2\d3store2\models\Store2TranRef::className(), ['transaction_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStore2Transactions()
    {
        return $this->hasMany(\d3yii2\d3store2\models\Store2Transaction::className(), ['from_id' => 'id']);
    }
    /**
     * ENUM field values
     */

    /**
     * @return bool
     */
    public function isTypeIn(): bool
    {
        return $this->type === self::TYPE_IN;
    }

    /**
     * @return bool
     */
    public function isTypeOut(): bool
    {
        return $this->type === self::TYPE_OUT;
    }

    /**
     * @return bool
     */
    public function isTypeTransfer(): bool
    {
        return $this->type === self::TYPE_TRANSFER;
    }

}
